2022-1-19: 因为文字的高亮方面不太好控制，我这里倾向于更多的图形来编程，并且界面有固定的限制，本软件编写的程序倾向于小而美的代码。  
参考如下的图片  
![](./resource/img/Syntax_diagram_example.svg)  

   - 条件语句
     - if是这样子的
   - 循环语句
     - while
     - for
   - 函数
     - 示例中是没有名字的参数，可以分成2种显示方式
       - 一种是链接的方式
       - 一种是包含在内的方式 ： 这种取消了。

重要： 
   - 长方形的含义是不同的，或许是一个表达式，或许是多行语句（但这个必须得是一个缩进的）。 
   - 为了避免perl的同一个问题不同的解决方式，我这里统一一下，同一个图形界面跟代码是唯一的，不允许自定义图形界面中元素（以后的可视化控件除外）的位置。


2022-1-12: 目标定位，小学生乃至幼儿园的，减少复杂性，不是存粹图形，而是图形+文字的方式编程，这个相当于图形编程和文字编程之间的过渡，最外层是类似uml的，显示各个类之间的关系，内层是面向过程的，还有自定义的，比如scrapy这个爬虫，是分成几个组件，组件有关联，我的这个软件可以显示这些关联，且在一个图形界面上就足够完成所有的操作，再比如tensorflow，我争取只是用图形就能够完成网络设计。  
比如如下是Scrapy的数据流，  
![Scrapy的数据流](./resource/img/scrapy_dataflow.png)  
我会做一个类似的图片，然后显示所有的item和其他的，流的动向很清楚，从总体上把握。
2022-1-9-2： 草稿，我想象中的界面是：大部分情况下只用操作画布就可以，会显示属性，有如下按钮之类的
   - 项目或者文件夹相关
     - 打开
     - 保存
     - 另存为
2022-1-9: 首先确定一下需求，我的需求是要尽可能的简单，我打算分成如下两大部分
   - 面向过程部分
     - 结构
       - 顺序结构
       - 条件结构
       - 循环结构
     - 各个结构的图形可以互相连接。
   - 面向对象部分
     - 类
       - 字段
       - 方法
       - 属性：特殊的方法
       - 继承
总体上是分层次显示，比如最外层仅仅显示类和类的属性方法等，只有点开某个具体的方法才显示具体的面向过程信息。
总体上：最外层是面向过程和面向对象，内层的是面向过程,其实uml也是这样子的。

2022-1-2： 新思路，我原先是想要用c#实现的，毕竟我经常用c#，不过c#好像并没有好的生成语法树，后来看到java有开源的生成语法树的，就想用java来做了，但后来想想，还是用python做吧，最主要还是其简单，我用ast来做，先做一个开头，1.0版本的用python，2.0的用java，并且0.5版本前的不具备动态执行的能力，先易后难。
关于界面方面，一开始我想用pyqt，后来想想协议不怎么好，后来想用tkinter，但好像绘图的不怎么好，最后我决定用pygame，嗯，并且这个有很多其他的库，并且tkinter和pygame是可以结合的。
经过我测试，tkinter和pygame都有自己的消息系统，这两个不方便结合，我这里看到有别的方式可以实现，就是PGU - Phil's pyGame Utilities。
这个pygame2跟tkinter不怎么兼容，所以这里我用PySide2来实现吧,也不用pygame了，这个是LGPL协议，对商业比较友好。


**我的目标是做一个软件，纯粹用图形来编程，并且有一个版本是可以动态执行的，最重要的是尽量简单。**




以前：目标，我这个程序目标是让小学生都可以操作编程，可以方便编程以及批处理，界面组件可以方便
分类：
    面向对象： 也就是类啦。
    面向过程： 
        支持变量类型。
        支持顺序语句，循环语句和分支语句。

我要精简一下uml，urml有如下的图
    - 用例图
    - 类图
    - 顺序图/时序图：从计算机的角度描述用例
    - 协作图
    - 状态图
    - 活动图：流程图或者带泳道的活动图。

我接下来看看都需要什么操作吧，我直接看看java的语法树都有什么吧。